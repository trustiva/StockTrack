import { sql } from 'drizzle-orm';
import {
  index,
  jsonb,
  pgTable,
  timestamp,
  varchar,
  text,
  integer,
  decimal,
  boolean,
  pgEnum,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
import { relations } from "drizzle-orm";

// Session storage table.
// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table.
// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.
export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Freelancer profiles
export const freelancerProfiles = pgTable("freelancer_profiles", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  bio: text("bio"),
  hourlyRate: decimal("hourly_rate", { precision: 10, scale: 2 }),
  skills: text("skills").array(),
  experience: text("experience"),
  portfolio: text("portfolio"),
  availability: varchar("availability"),
  preferredProjectTypes: text("preferred_project_types").array(),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Platform connections (Upwork, Freelancer, Fiverr, etc.)
export const platformConnections = pgTable("platform_connections", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  platform: varchar("platform").notNull(), // 'upwork', 'freelancer', 'fiverr', etc.
  isActive: boolean("is_active").default(true),
  credentials: jsonb("credentials"), // encrypted platform credentials
  lastSync: timestamp("last_sync"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Project status enum
export const projectStatusEnum = pgEnum("project_status", [
  "open",
  "in_progress", 
  "completed",
  "cancelled"
]);

// Proposal status enum
export const proposalStatusEnum = pgEnum("proposal_status", [
  "pending",
  "accepted",
  "rejected",
  "withdrawn"
]);

// Projects found by automation
export const projects = pgTable("projects", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  title: varchar("title").notNull(),
  description: text("description"),
  platform: varchar("platform").notNull(),
  platformProjectId: varchar("platform_project_id").notNull(),
  budget: varchar("budget"),
  budgetType: varchar("budget_type"), // 'fixed', 'hourly'
  skills: text("skills").array(),
  clientName: varchar("client_name"),
  clientRating: decimal("client_rating", { precision: 3, scale: 2 }),
  projectUrl: varchar("project_url"),
  deadline: timestamp("deadline"),
  status: projectStatusEnum("status").default("open"),
  matchScore: integer("match_score"), // 0-100
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Proposals generated and sent
export const proposals = pgTable("proposals", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  projectId: varchar("project_id").notNull().references(() => projects.id, { onDelete: "cascade" }),
  content: text("content").notNull(),
  bidAmount: decimal("bid_amount", { precision: 10, scale: 2 }),
  proposedTimeline: varchar("proposed_timeline"),
  status: proposalStatusEnum("status").default("pending"),
  isAutoGenerated: boolean("is_auto_generated").default(false),
  sentAt: timestamp("sent_at"),
  respondedAt: timestamp("responded_at"),
  feedback: text("feedback"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Automation settings
export const automationSettings = pgTable("automation_settings", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  autoSearch: boolean("auto_search").default(true),
  autoProposal: boolean("auto_proposal").default(false),
  emailNotifications: boolean("email_notifications").default(true),
  minBudget: decimal("min_budget", { precision: 10, scale: 2 }),
  maxBudget: decimal("max_budget", { precision: 10, scale: 2 }),
  preferredSkills: text("preferred_skills").array(),
  excludeKeywords: text("exclude_keywords").array(),
  maxProposalsPerDay: integer("max_proposals_per_day").default(5),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Notifications
export const notifications = pgTable("notifications", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  title: varchar("title").notNull(),
  message: text("message").notNull(),
  type: varchar("type").notNull(), // 'project_match', 'proposal_update', 'system'
  isRead: boolean("is_read").default(false),
  data: jsonb("data"), // additional notification data
  createdAt: timestamp("created_at").defaultNow(),
});

// Relations
export const usersRelations = relations(users, ({ one, many }) => ({
  freelancerProfile: one(freelancerProfiles),
  platformConnections: many(platformConnections),
  proposals: many(proposals),
  automationSettings: one(automationSettings),
  notifications: many(notifications),
}));

export const freelancerProfilesRelations = relations(freelancerProfiles, ({ one }) => ({
  user: one(users, { fields: [freelancerProfiles.userId], references: [users.id] }),
}));

export const platformConnectionsRelations = relations(platformConnections, ({ one }) => ({
  user: one(users, { fields: [platformConnections.userId], references: [users.id] }),
}));

export const proposalsRelations = relations(proposals, ({ one }) => ({
  user: one(users, { fields: [proposals.userId], references: [users.id] }),
  project: one(projects, { fields: [proposals.projectId], references: [projects.id] }),
}));

export const projectsRelations = relations(projects, ({ many }) => ({
  proposals: many(proposals),
}));

export const automationSettingsRelations = relations(automationSettings, ({ one }) => ({
  user: one(users, { fields: [automationSettings.userId], references: [users.id] }),
}));

export const notificationsRelations = relations(notifications, ({ one }) => ({
  user: one(users, { fields: [notifications.userId], references: [users.id] }),
}));

// Insert schemas
export const insertFreelancerProfileSchema = createInsertSchema(freelancerProfiles).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertPlatformConnectionSchema = createInsertSchema(platformConnections).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertProjectSchema = createInsertSchema(projects).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertProposalSchema = createInsertSchema(proposals).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertAutomationSettingsSchema = createInsertSchema(automationSettings).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertNotificationSchema = createInsertSchema(notifications).omit({
  id: true,
  createdAt: true,
});

// Types
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;
export type FreelancerProfile = typeof freelancerProfiles.$inferSelect;
export type InsertFreelancerProfile = z.infer<typeof insertFreelancerProfileSchema>;
export type PlatformConnection = typeof platformConnections.$inferSelect;
export type InsertPlatformConnection = z.infer<typeof insertPlatformConnectionSchema>;
export type Project = typeof projects.$inferSelect;
export type InsertProject = z.infer<typeof insertProjectSchema>;
export type Proposal = typeof proposals.$inferSelect;
export type InsertProposal = z.infer<typeof insertProposalSchema>;
export type AutomationSettings = typeof automationSettings.$inferSelect;
export type InsertAutomationSettings = z.infer<typeof insertAutomationSettingsSchema>;
export type Notification = typeof notifications.$inferSelect;
export type InsertNotification = z.infer<typeof insertNotificationSchema>;
