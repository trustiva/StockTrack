import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { 
  Wand2, 
  Send, 
  Copy, 
  RotateCcw, 
  Save, 
  Settings, 
  Target,
  Clock,
  DollarSign,
  FileText
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { motion } from "framer-motion";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface Project {
  id: string;
  title: string;
  description: string;
  budget: string;
  budgetType: 'fixed' | 'hourly';
  skills: string[];
  clientName: string;
  clientRating?: number;
  deadline?: string;
  platform: string;
  matchScore?: number;
}

interface EnhancedProposalGeneratorProps {
  project: Project;
  onClose?: () => void;
}

export default function EnhancedProposalGenerator({ project, onClose }: EnhancedProposalGeneratorProps) {
  const [proposalContent, setProposalContent] = useState('');
  const [bidAmount, setBidAmount] = useState('');
  const [timeline, setTimeline] = useState('');
  const [customInstructions, setCustomInstructions] = useState('');
  const [tone, setTone] = useState<'professional' | 'friendly' | 'technical'>('professional');
  const [includePortfolio, setIncludePortfolio] = useState(true);
  const [includeTestimonials, setIncludeTestimonials] = useState(false);
  const [emphasis, setEmphasis] = useState<number[]>([50]);
  const [autoSubmit, setAutoSubmit] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Generate proposal mutation
  const generateProposalMutation = useMutation({
    mutationFn: async (instructions: string) => {
      const response = await apiRequest('/api/proposals/generate', {
        method: 'POST',
        body: JSON.stringify({
          projectId: project.id,
          customInstructions: instructions,
          tone,
          includePortfolio,
          includeTestimonials,
          emphasis: emphasis[0],
        }),
        headers: { 'Content-Type': 'application/json' },
      });
      return response;
    },
    onSuccess: (data) => {
      setProposalContent(data.content);
      setBidAmount(data.bidAmount?.toString() || '');
      setTimeline(data.timeline || '');
      setIsGenerating(false);
      toast({
        title: "Proposal Generated",
        description: "AI has created a customized proposal for this project.",
      });
    },
    onError: () => {
      setIsGenerating(false);
      toast({
        title: "Generation Failed",
        description: "Could not generate proposal. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Submit proposal mutation
  const submitProposalMutation = useMutation({
    mutationFn: async () => {
      // First create the proposal
      const proposal = await apiRequest('/api/proposals', {
        method: 'POST',
        body: JSON.stringify({
          projectId: project.id,
          content: proposalContent,
          bidAmount: parseFloat(bidAmount),
          proposedTimeline: timeline,
          isAutoGenerated: false,
        }),
        headers: { 'Content-Type': 'application/json' },
      });

      // If auto-submit is enabled, submit to platform
      if (autoSubmit) {
        await apiRequest(`/api/proposals/${proposal.id}/submit`, {
          method: 'POST',
        });
      }

      return proposal;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/proposals'] });
      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
      toast({
        title: autoSubmit ? "Proposal Submitted" : "Proposal Saved",
        description: autoSubmit 
          ? "Your proposal has been submitted to the platform."
          : "Your proposal has been saved and can be submitted later.",
      });
      onClose?.();
    },
  });

  const handleGenerate = () => {
    setIsGenerating(true);
    generateProposalMutation.mutate(customInstructions);
  };

  const handleSubmit = () => {
    if (!proposalContent.trim() || !bidAmount || !timeline) {
      toast({
        title: "Incomplete Proposal",
        description: "Please fill in all required fields.",
        variant: "destructive",
      });
      return;
    }
    submitProposalMutation.mutate();
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(proposalContent);
    toast({
      title: "Copied to Clipboard",
      description: "Proposal content has been copied.",
    });
  };

  const getEmphasisLabel = (value: number) => {
    if (value < 30) return 'Conservative';
    if (value < 70) return 'Balanced';
    return 'Aggressive';
  };

  const estimatedBudget = project.budgetType === 'fixed' 
    ? project.budget.match(/\$(\d+)/)?.[1] 
    : project.budget.match(/\$(\d+)/)?.[1];

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Project Overview */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <CardTitle className="text-lg">{project.title}</CardTitle>
              <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                <Badge variant="outline">{project.platform}</Badge>
                <Badge variant="outline">{project.budgetType}</Badge>
                <Badge variant="outline">{project.budget}</Badge>
                {project.matchScore && (
                  <Badge variant="secondary">{project.matchScore}% match</Badge>
                )}
              </div>
            </div>
            <div className="text-right text-sm text-gray-500">
              <div className="flex items-center gap-1">
                <Target className="h-3 w-3" />
                Client: {project.clientName}
              </div>
              {project.clientRating && (
                <div>Rating: {project.clientRating}/5</div>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <p className="text-gray-700 dark:text-gray-300 text-sm line-clamp-3">
            {project.description}
          </p>
          <div className="flex flex-wrap gap-1 mt-3">
            {project.skills.map((skill) => (
              <Badge key={skill} variant="secondary" className="text-xs">
                {skill}
              </Badge>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="grid lg:grid-cols-3 gap-6">
        {/* Generation Controls */}
        <div className="lg:col-span-1 space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Settings className="h-4 w-4" />
                Generation Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>Tone</Label>
                <Tabs value={tone} onValueChange={(value: any) => setTone(value)} className="w-full">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="professional" className="text-xs">Pro</TabsTrigger>
                    <TabsTrigger value="friendly" className="text-xs">Friendly</TabsTrigger>
                    <TabsTrigger value="technical" className="text-xs">Tech</TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>

              <div className="space-y-2">
                <Label>Emphasis: {getEmphasisLabel(emphasis[0])}</Label>
                <Slider
                  value={emphasis}
                  onValueChange={setEmphasis}
                  max={100}
                  step={10}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-gray-500">
                  <span>Conservative</span>
                  <span>Aggressive</span>
                </div>
              </div>

              <Separator />

              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <Label className="text-sm">Include Portfolio</Label>
                  <Switch
                    checked={includePortfolio}
                    onCheckedChange={setIncludePortfolio}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <Label className="text-sm">Include Testimonials</Label>
                  <Switch
                    checked={includeTestimonials}
                    onCheckedChange={setIncludeTestimonials}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <Label className="text-sm">Auto-Submit</Label>
                  <Switch
                    checked={autoSubmit}
                    onCheckedChange={setAutoSubmit}
                  />
                </div>
              </div>

              <Separator />

              <div className="space-y-2">
                <Label htmlFor="instructions">Custom Instructions</Label>
                <Textarea
                  id="instructions"
                  placeholder="Add specific points you want to emphasize..."
                  value={customInstructions}
                  onChange={(e) => setCustomInstructions(e.target.value)}
                  rows={3}
                  className="text-sm"
                />
              </div>

              <Button
                onClick={handleGenerate}
                disabled={isGenerating || generateProposalMutation.isPending}
                className="w-full"
              >
                <Wand2 className="h-4 w-4 mr-2" />
                {isGenerating ? 'Generating...' : 'Generate Proposal'}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Proposal Content */}
        <div className="lg:col-span-2 space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-base flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  Proposal Content
                </CardTitle>
                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={copyToClipboard}
                    disabled={!proposalContent}
                  >
                    <Copy className="h-3 w-3" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setProposalContent('')}
                    disabled={!proposalContent}
                  >
                    <RotateCcw className="h-3 w-3" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {isGenerating ? (
                <div className="space-y-3">
                  <div className="animate-pulse space-y-2">
                    <div className="h-4 bg-gray-200 dark:bg-gray-800 rounded w-3/4"></div>
                    <div className="h-4 bg-gray-200 dark:bg-gray-800 rounded w-full"></div>
                    <div className="h-4 bg-gray-200 dark:bg-gray-800 rounded w-5/6"></div>
                  </div>
                  <div className="text-center text-sm text-gray-500">
                    AI is crafting your personalized proposal...
                  </div>
                </div>
              ) : (
                <Textarea
                  placeholder="Your AI-generated proposal will appear here, or you can write your own..."
                  value={proposalContent}
                  onChange={(e) => setProposalContent(e.target.value)}
                  rows={12}
                  className="text-sm"
                />
              )}
            </CardContent>
          </Card>

          {/* Bid Details */}
          <div className="grid md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-base flex items-center gap-2">
                  <DollarSign className="h-4 w-4" />
                  Bid Amount
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <Input
                    type="number"
                    placeholder={estimatedBudget ? `Suggested: $${estimatedBudget}` : "Enter your bid"}
                    value={bidAmount}
                    onChange={(e) => setBidAmount(e.target.value)}
                  />
                  {estimatedBudget && (
                    <p className="text-xs text-gray-500">
                      Project budget: {project.budget}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  Timeline
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <Input
                    placeholder="e.g., 2-3 weeks"
                    value={timeline}
                    onChange={(e) => setTimeline(e.target.value)}
                  />
                  {project.deadline && (
                    <p className="text-xs text-gray-500">
                      Deadline: {new Date(project.deadline).toLocaleDateString()}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center gap-3">
            <Button
              onClick={handleSubmit}
              disabled={!proposalContent.trim() || !bidAmount || !timeline || submitProposalMutation.isPending}
              className="flex-1"
            >
              {autoSubmit ? (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  {submitProposalMutation.isPending ? 'Submitting...' : 'Submit to Platform'}
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  {submitProposalMutation.isPending ? 'Saving...' : 'Save Proposal'}
                </>
              )}
            </Button>
            {onClose && (
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
            )}
          </div>

          {autoSubmit && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              className="p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg border border-yellow-200 dark:border-yellow-800"
            >
              <div className="flex items-center gap-2 text-sm">
                <Send className="h-4 w-4 text-yellow-600" />
                <span className="font-medium text-yellow-800 dark:text-yellow-200">Auto-Submit Enabled</span>
              </div>
              <p className="text-yellow-700 dark:text-yellow-300 text-xs mt-1">
                Your proposal will be automatically submitted to {project.platform} when you click submit.
              </p>
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
}